protect: private key = KM
             message = M

            AE(KM, Ku) = Ciphered key
            E(M, KM) = Ciphered message
    
    check: AD(C, Ku) = E(M, K) must be equal to hash

    unprotect: AD(Ciphered key, Kr) = KM
               D(M, KM) = M
               


document.json
Hybrid cipher
content: messagem encriptada com secret (mensagem original + timestamp + nounce + IV)
signature: DS -> private_key(hash( mensagem + timestamp + nounce))

input   -> protect input_file secret_key output_file
        -> check input_file public_key secret_key
        -> unprotect input_file secret_key public_key output_file


workflow:   quando sender quer enviar mensagem:
                -> cria uma secret key
                -> cria um par de chaves publica e privada, onde a publica Ã© enviada para o receiver (CA)
                -> decobre a public key do receiver (CA)
                -> partilha a secret key com o receiver (usando a public key do receiver), encriptando a secret key com a public key do receiver (TLS)
                -> encripta a mensagem com a secret key ( usando tb um IV,nounce e timestamp)
                -> assina mensagem com uma DS que usa a sua private key
            quando o reciever recebe uma mensagem:
                -> decifra a secret key com a sua private key
                -> decifra a mensagem com a secret key
                -> faz check:
                    Calcular o hash da mensagem
                    verifica a assinatura com a public key do sender , onde vai buscar a public key do sender ao CA e saca o hash da mensagem
                    compara os dois hashes e verifica nounces e timestamps
                -> se tudo estiver bem, guarda a mensagem no output file


Examples of commands:
    protect resources/input/example1.json resources/keys/secret.key resources/output/encrypted.json resources/keys/private.privkey
    unprotect resources/output/encrypted.json resources/keys/secret.key resources/output/decrypted.json


How to run server:
    mvn -pl application-server spring-boot:run

How to run client:
    mvn -pl client exec:java

How to set up postgresql database (before running server):

    1.Ensure PostgreSQL Is Running
        sudo service postgresql start

    2.Login to PostgreSQL
        sudo -u postgres psql

    3.Create the Database
        CREATE DATABASE cardb;  # Name configured in application.properties
        (\l to see databases)

    4. Create the User sirs
        CREATE USER sirs WITH ENCRYPTED PASSWORD 'sirs';
        (\du to see users)

    5. Grant Permissions to the User
        GRANT ALL PRIVILEGES ON DATABASE cardb TO sirs;

    6. Exit psql prompt:
        \q

    To see if everything is ok:
        Run server:
            You should see some logs like: ...create table ...
        Check database:
            psql -U sirs -d cardb # Connect to the cardb database with new user
            \dt # List the tables in the cardb database. See if our tables are there !


